plugins {
    id 'java'
    id 'war'
    id "io.spring.dependency-management" version "1.0.4.RELEASE"
    id 'org.springframework.boot' version '2.0.4.RELEASE'
}


//org.springframework.boot gradle plugin
//* collects all the jars on the classpath and builds a single, runnable "Ã¼ber-jar"
//* searches for the public static void main() method to flag as a runnable class.
//*provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies.

jar {
    enabled = true
}
war {
    enabled = true
}

group 'my_org'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8


repositories {
    jcenter()
}

task all(type: GradleBuild) {
    tasks = ['clean', 'build', 'allProperties']
}


task allProperties(type: WriteProperties) {
    // output build properties 
    def propertyFile = file "src/main/resources/build.properties"
    def props = new Properties()
    props.setProperty("version", project.version)
    properties props
    outputFile propertyFile
    
    // load application properties to access during build
    file("src/main/resources/application.properties").withReader {
        Properties appProps = new Properties()
        appProps.load(it)
        project.ext.props = appProps
    }
}

def fakeMongoDBVersion = '2.2.0-RC2'
def gsonVersion = '2.8.2'
def hikariCPVersion = '3.2.0'
def junitVersion = '4.12'
def mongoDBVersion = '3.6.3'
def neo4JCoreVersion = '3.4.6'
def neo4JHarnessVersion = '3.4.6'
def neo4jJavaDriverVersion = '1.6.2'
def neo4JOgmVersion = '3.1.1-RC2'
def postgresSqlVersion = '42.2.4'
def restAssuredVersion = '3.1.0'
def springBootVersion = '2.0.4.RELEASE'
def springFoxVersion = '2.9.0'


dependencies {

    // ****** neo4j drivers ******
    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: "${neo4jJavaDriverVersion}"

    // ****** ogm for neo4j ******
    compile group: 'org.neo4j', name: 'neo4j-ogm-core', version: "${neo4JOgmVersion}"
    compile group: 'org.neo4j', name: 'neo4j-ogm-bolt-driver', version: "${neo4JOgmVersion}"

    // ****** Neo4J testing ******
    testCompile group: 'org.neo4j.test', name: 'neo4j-harness', version: "${neo4JHarnessVersion}"
    testCompile group: 'org.neo4j', name: 'neo4j-ogm-test', version: "${neo4JOgmVersion}"

    // ****** core neo4j api ******
    compile group: 'org.neo4j', name: 'neo4j-graphdb-api', version: "${neo4JCoreVersion}"

    // ****** postgresql ******
    compile group: 'org.postgresql', name: 'postgresql', version: "${postgresSqlVersion}"

    // ****** MongoDB synchronous driver ******
    compile group: 'org.mongodb', name: 'mongodb-driver', version: "${mongoDBVersion}"
    compile group: 'org.mongodb', name: 'bson', version: "${mongoDBVersion}"
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: "${mongoDBVersion}"


    // ****** MongoDB testing ******
    testCompile group: 'com.github.fakemongo', name: 'fongo', version: "${fakeMongoDBVersion}"

    // ****** Connection pool for relational databases ******
    compile group: 'com.zaxxer', name: 'HikariCP', version: "${hikariCPVersion}"

    // ****** Swagger tools ******
    compile group: 'io.springfox', name: 'springfox-swagger2', version: "${springFoxVersion}"
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${springFoxVersion}"

    // ****** Spring ******
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"

    // ****** Gson ******
    compile group: 'com.google.code.gson', name: 'gson', version: "${gsonVersion}"

    // ****** Spring actuator ******
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: "${springBootVersion}"

    // ****** JUnit 4 ******
    testCompile group: 'junit', name: 'junit', version: "${junitVersion}"

    // ****** REST Assurred
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: "${restAssuredVersion}"

    if(project.ext.props["spring.profiles.active"] != "dev"){
    // if we're not in dev mode, we don't want the embedded container
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    
    }
}
